<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>numpy数组基础</title>
    <url>/2021/05/29/numpy%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="NUMPY"><a href="#NUMPY" class="headerlink" title="NUMPY"></a>NUMPY</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>在numpy中，创建数组有很多种方法，例如如下的例子：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
sws_1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
sws_2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sws_3 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 
sws_4 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 切片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_3<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_4<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
 
<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span>         <span class="token number">1.57079633</span> <span class="token number">3.14159265</span> <span class="token number">4.71238898</span> <span class="token number">6.28318531</span><span class="token punctuation">]</span>
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>np.arange()和np.linspace()方法可以参考<a href="https://blog.csdn.net/qq_53762188/article/details/117167379">python之range()、arange()和linspace()</a>这篇文章</p>
<p>切片的知识也可以参照<a href="https://blog.csdn.net/qq_53762188/article/details/117044059">python列表之部分列表——切片</a>，毕竟一维数组的切片还是一样的</p>
<h2 id="多维数组切片"><a href="#多维数组切片" class="headerlink" title="多维数组切片"></a>多维数组切片</h2><p>多维数组的切片要比一维数组复杂一点，但也只是一点点哦，让我们一起来看</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> numpy <span class="token keyword">import</span> arange
 
sws_1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment"># 在第0行进行1：4的切片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment"># 在第0列进行1：4的切片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment"># 从列、行的0开始，最后结束，分别步进为2取值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment"># 在第一列取所有元素</span>
 
<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> 
 
<span class="token punctuation">[</span> <span class="token number">5</span> <span class="token number">10</span> <span class="token number">15</span><span class="token punctuation">]</span> 
 
<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span>  <span class="token number">2</span>  <span class="token number">4</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">12</span> <span class="token number">14</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span><span class="token number">20</span> <span class="token number">22</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">]</span> 
 
<span class="token punctuation">[</span> <span class="token number">1</span>  <span class="token number">6</span> <span class="token number">11</span> <span class="token number">16</span> <span class="token number">21</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> numpy <span class="token keyword">import</span> arange
 
sws_1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 数据结构类型，如list，dict等</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>  <span class="token comment"># 数据元素类型，如int，float等，还有位的大小</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">.</span>size<span class="token punctuation">)</span>  <span class="token comment"># 统计元素个数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment"># 相当于数学里的（x，y，z）</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">.</span>itemsize<span class="token punctuation">)</span>  <span class="token comment"># 每项占用的字节数，一个字节有8位</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span>  <span class="token comment"># 数组的维度</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">.</span>nbytes<span class="token punctuation">)</span>  <span class="token comment"># 数组中所有数据消耗的总字节</span>
 
<span class="token comment">######</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'numpy.ndarray'</span><span class="token operator">></span>
int32
<span class="token number">25</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token number">4</span>
<span class="token number">2</span>
<span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h2><p>基本操作符+、-、*、/、**、&lt;、&gt;和dot()</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> numpy <span class="token keyword">import</span> arange
 
sws_0 <span class="token operator">=</span> arange<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span>
sws_0 <span class="token operator">=</span> sws_0<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 让sws_0的所有元素按照（5，5）的维度排列</span>
 
sws_1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
 
 
<span class="token comment"># 对应索引位置的元素进行运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0 <span class="token operator">+</span> sws_1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0 <span class="token operator">-</span> sws_1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0 <span class="token operator">*</span> sws_1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0 <span class="token operator">/</span> sws_1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0 <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0 <span class="token operator">&lt;</span> sws_1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0 <span class="token operator">></span> sws_1<span class="token punctuation">)</span>
 
<span class="token comment"># 矩阵的乘法</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>sws_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>至于结果就不给大家发出来啦，毕竟太长了嘛，占篇幅，大家看着也疲劳，不过大家要自己动手试试哦</p>
<h2 id="数组特殊运算符"><a href="#数组特殊运算符" class="headerlink" title="数组特殊运算符"></a>数组特殊运算符</h2><p>如果要找数组中的一些特殊值，比如最大、最小或者求和呀，这里也可以很方便的</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> arange
 
sws_0 <span class="token operator">=</span> arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
 
 
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
<span class="token comment"># 第一位先存入一个列表，然后第一位加第二位再存入列表，之后再加上第三位存入列表，以此类推</span>
 
 
<span class="token comment">######</span>
<span class="token number">45</span>
<span class="token number">0</span>
<span class="token number">9</span>
<span class="token punctuation">[</span> <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">3</span>  <span class="token number">6</span> <span class="token number">10</span> <span class="token number">15</span> <span class="token number">21</span> <span class="token number">28</span> <span class="token number">36</span> <span class="token number">45</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
 
sws_0 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
sws_1 <span class="token operator">=</span> sws_0<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  
<span class="token comment"># 用一个列表包装想要打印的元素的索引</span>
sws_2 <span class="token operator">=</span> sws_0<span class="token punctuation">[</span>sws_0 <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">]</span>  
<span class="token comment"># 根据条件判断</span>
sws_3 <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>sws_0 <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">)</span>  
<span class="token comment"># 返回满足条件的元素的索引</span>
sws_4 <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>sws_0 <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
 
 
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_0<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_3<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_4<span class="token punctuation">)</span>
 
<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">5</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token punctuation">(</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>python函数str()避免类型错误</title>
    <url>/2021/05/29/python%E5%87%BD%E6%95%B0str()%E9%81%BF%E5%85%8D%E7%B1%BB%E5%9E%8B%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>python中当输出需要拼接字符串(char)和整数(int)时，需要用到str()函数</p>
<p>如果编写如下代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">23</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Happy "</span> <span class="token operator">+</span> age <span class="token operator">+</span><span class="token string">"ed Birthday!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>会出现如下报错：</p>
<span id="more"></span>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">TypeError<span class="token punctuation">:</span> can only concatenate <span class="token builtin">str</span> <span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token string">"int"</span><span class="token punctuation">)</span> to <span class="token builtin">str</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这是一个<strong>类型错误，</strong>意味着python无法识别你使用的变量。</p>
<p>它不知道age是23还是字符2和3。</p>
<p>这个时候我们就需要用到str()函数来连接字符串和整数了：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">23</span> 
message <span class="token operator">=</span> <span class="token string">"Happy "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"rd Birthday!"</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>

<span class="token comment">######</span>
Happy 23rd Birthday!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这里python就知道你用str()函数把23转换为字符串2和3了，但是原变量age未改变</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>isinstance(变量名，类型)函数就是检测变量类型的函数，如果匹配则返回true，不匹配则返回False</p>
]]></content>
      <categories>
        <category>python</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>str()</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy理解</title>
    <url>/2021/05/30/numpy%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>我们再平常学习python和matlab中经常会看到一个词numpy，并且各大项目算法中都会涉及它，那究竟什么是numpy呢，我们今天就一起来看看吧</p>
<h1 id="什么是numpy"><a href="#什么是numpy" class="headerlink" title="什么是numpy"></a>什么是numpy</h1><p>numpy是由两个单词组成的——numerical、python，简单来看就是“数字python”，这样是不是就能很清楚的知道numpy是用来做python中有关于数值操作的呢。</p>
<p>其实呀，numpy就是一个功能强大的python库，提供了大量的库函数和操作，可以帮助我们轻松的进行数值运算，其中就包括：</p>
<span id="more"></span>

<ul>
<li><strong>机器学习：</strong>在编写相关算法时，需要用到例如矩阵乘法、加法和换位等运算，这时numpy就提供了用于简单编写代码并且快速计算的库。numpy数组就用于存储训练数据和机器学习模型的参数。</li>
<li><strong>图像处理和计算机图形学：</strong>我们在学习matlab时就知道音频信号是一维的，用一些函数就能处理，但是图像确实多维度的，这时numpy就提供了一些非常优秀的库函数来快速处理图像。例如：镜像、旋转等。</li>
<li><strong>数学任务：</strong>我们平时学习高数中的积分、微分等是不是觉得很头疼呢，但是numpy确实非常简单，并且会使得python替代matlab</li>
</ul>
<h1 id="numpy的安装"><a href="#numpy的安装" class="headerlink" title="numpy的安装"></a>numpy的安装</h1><p>关于numpy最快速简单的安装方法就是在shell上使用</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>但是如果你的pip不是最新版本21.1.1的话，是会下载失败的，查看pip版本用以下命令</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">pip show pip
 
<span class="token comment">######</span>
Name<span class="token punctuation">:</span> pip
Version<span class="token punctuation">:</span> <span class="token number">21.1</span><span class="token number">.1</span> 
Summary<span class="token punctuation">:</span> The PyPA recommended tool <span class="token keyword">for</span> installing Python packages<span class="token punctuation">.</span>
Home<span class="token operator">-</span>page<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">//</span>pip<span class="token punctuation">.</span>pypa<span class="token punctuation">.</span>io<span class="token operator">/</span>
Author<span class="token punctuation">:</span> The pip developers
Author<span class="token operator">-</span>email<span class="token punctuation">:</span> distutils<span class="token operator">-</span>sig@python<span class="token punctuation">.</span>org
License<span class="token punctuation">:</span> MIT
Location<span class="token punctuation">:</span> d<span class="token punctuation">:</span>\pythonproject\venv\lib\site<span class="token operator">-</span>packages
Requires<span class="token punctuation">:</span>
Required<span class="token operator">-</span>by<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>而更新pip则用如下命令</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>m pip install <span class="token operator">-</span><span class="token operator">-</span>upgrade pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="numpy数组"><a href="#numpy数组" class="headerlink" title="numpy数组"></a>numpy数组</h1><p>numpy数组是numpy提供的最重要的数据结构，他是python列表的扩展，但是却具备大量的函数和运算符，可以帮助我们快速编写各种复杂计算的代码。</p>
<h2 id="定义numpy数组"><a href="#定义numpy数组" class="headerlink" title="定义numpy数组"></a>定义numpy数组</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token comment"># 给numpy定义一个别的名字np</span>
sws_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_array<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>我们这里先用as给numpy去一个缩写np，使得我们的代码更加简洁，再用import导入numpy库。然后我们创建了5个整数的numpy数组，最后将其打印出来。我们在自己的电脑上尝试的时候，一定一定一定要记得提前安装好numpy库噢！！！</p>
<h2 id="numpy数组的相关功能"><a href="#numpy数组的相关功能" class="headerlink" title="numpy数组的相关功能"></a>numpy数组的相关功能</h2><p>其实numpy数组和python列表基本没什么差别，python列表能完成的，numpy数组也能，例如</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token comment"># 给numpy定义一个别的名字np</span>
sws_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_array<span class="token punctuation">)</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_array<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment">#数组的长度</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#打印索引为0的元素</span>
 
sws_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6</span>  <span class="token comment">#修改索引为0的元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上代码，大家都可以自己在电脑上尝试一下，我就不一一举例了，我们主要来看看numpy的独特算法</p>
<h3 id="0数组和1数组"><a href="#0数组和1数组" class="headerlink" title="0数组和1数组"></a>0数组和1数组</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token comment"># 给numpy定义一个别的名字np</span>
sws_zeros_array <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_zeros_array<span class="token punctuation">)</span>
 
sws_ones_array <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_ones_array<span class="token punctuation">)</span>
 
<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span> <span class="token number">0</span><span class="token punctuation">.</span> <span class="token number">0</span><span class="token punctuation">.</span> <span class="token number">0</span><span class="token punctuation">.</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以看到第二行用 np.zeros，第四行用np.ones就创建了相应的只含0，1的5个元素的数组，至于有没有其他的呢，大家可以自己动手试验一下</p>
<h3 id="随机数组"><a href="#随机数组" class="headerlink" title="随机数组"></a>随机数组</h3><p>我们玩腻了0和1，现在想玩点高难度的，好，满足你，我们来随机数组</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token comment"># 给numpy定义一个别的名字np</span>
sws_random_array <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_random_array<span class="token punctuation">)</span>
 
<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token number">0.4732169</span>  <span class="token number">0.46246392</span> <span class="token number">0.11748248</span> <span class="token number">0.68879901</span> <span class="token number">0.43405514</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以看到这里就打印了5个随机数组，当然你们操作的时候可能会和我的不一样，因为是在0-1之间的随机数嘛，哈哈哈，如果一样的话，那慢蜗牛岂不是可以去买彩票了，如果大家不满足0-1的话，可以尝试*10等操作看看结果啦</p>
<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>一维数组说完了，我们现在来看看二维数组(i,j),这里i表示了行数，j表示了列数</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token comment"># 给numpy定义一个别的名字np</span>
sws_2d_array <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_2d_array<span class="token punctuation">)</span>
 
<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">9.50442357</span> <span class="token number">1.3031723</span>  <span class="token number">9.3511404</span> <span class="token punctuation">]</span>
 <span class="token punctuation">[</span><span class="token number">3.44925167</span> <span class="token number">2.25456602</span> <span class="token number">2.27545946</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">sws_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
 
<span class="token comment">######</span>
<span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以看到上面的相关操作，是不是觉得很熟悉呢，没错啦，和我们C语言中的二维数组就是一模一样的操作啦，哈哈哈哈</p>
<p>那我们现在来看看numpy特有的二维数组的操作</p>
<p>如果我们想以此输出某个列或者行的所有元素怎么办呢，这里就可以用到我们的冒号啦</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">sws_array_lie_0 <span class="token operator">=</span> sws_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_array_lie_0<span class="token punctuation">)</span>
 
<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们这里是选择打印索引为1的列的所有元素，大家可以尝试一下打印行哈</p>
<h1 id="numpy的数组操作"><a href="#numpy的数组操作" class="headerlink" title="numpy的数组操作"></a>numpy的数组操作</h1><p>不知道大家有没有学过线性代数呢，大家在面对矩阵的相乘等操作时，是不是头疼欲裂呢，不要着急，慢蜗牛教程在手，天下我有，一起来看看下面的例子吧</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
sws_1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
sws_2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7.0</span><span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
sum_0 <span class="token operator">=</span> sws_1 <span class="token operator">+</span> sws_2
subtract <span class="token operator">=</span> sws_1 <span class="token operator">-</span> sws_2
multiply <span class="token operator">=</span> sws_1 <span class="token operator">*</span> sws_2
division <span class="token operator">=</span> sws_1 <span class="token operator">/</span> sws_2
 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sum_0=\n'</span><span class="token punctuation">,</span> sum_0<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'subtract=\n'</span><span class="token punctuation">,</span> subtract<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'multiply=\n'</span><span class="token punctuation">,</span> multiply<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'division=\n'</span><span class="token punctuation">,</span> division<span class="token punctuation">)</span>
 
<span class="token comment">######</span>
sum_0<span class="token operator">=</span>
 <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">.</span>  <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">.</span> <span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
subtract<span class="token operator">=</span>
 <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
multiply<span class="token operator">=</span>
 <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">.</span> <span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">.</span> <span class="token number">32</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
division<span class="token operator">=</span>
 <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.2</span>        <span class="token number">0.33333333</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span><span class="token number">0.42857143</span> <span class="token number">0.5</span>       <span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以观察到，打印的结果都是对应索引的元素进行相关操作，如果要进行矩阵乘法，我们还需要加一点料</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">matrix_multiply <span class="token operator">=</span> sws_1<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>sws_2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>matrix_multiply<span class="token punctuation">)</span>
 
<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">.</span> <span class="token number">22</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">.</span> <span class="token number">50</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言求最大公约数和最小公倍数</title>
    <url>/2021/05/30/C%E8%AF%AD%E8%A8%80%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/</url>
    <content><![CDATA[<p>C语言编写两个函数，分别求两个整数的最大公约数和最小公倍数，并用主函数调用这两个函数，然后输出结果。两个整数由键盘输入。约定最大公约数为正整数，两数里有负的则最小公倍数就为负的。</p>
<span id="more"></span>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*

开发者：慢蜗牛 开发时间：2020.5.28

程序功能：计算最大公约数和最小公倍数

*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span>

<span class="token keyword">int</span> <span class="token function">max_</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">min_</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">max_</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment">//求最大公约数</span>

<span class="token punctuation">&#123;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span>  little<span class="token punctuation">;</span>

a <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取绝对值</span>

little <span class="token operator">=</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token comment">//取两数中最小值</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> little<span class="token punctuation">;</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">--</span><span class="token punctuation">)</span>

<span class="token punctuation">&#123;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">return</span> n<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">min_</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment">//求最小公倍数</span>

<span class="token punctuation">&#123;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> old<span class="token punctuation">;</span>

old <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去两数的绝对值的最大值</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> old<span class="token punctuation">;</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>

<span class="token punctuation">&#123;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">%</span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据有无正负，返回相关正负值</span>

<span class="token keyword">else</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">&#123;</span>

<span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>

<span class="token keyword">int</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//循环</span>

<span class="token punctuation">&#123;</span>

    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//控制两数不等于0</span>

<span class="token punctuation">&#123;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input error,please re-enter：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

c<span class="token operator">=</span><span class="token function">max_</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用函数</span>

d<span class="token operator">=</span><span class="token function">min_</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出</span>

<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>C</category>
        <category>作业</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>课堂练习</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言求素数</title>
    <url>/2021/05/30/C%E8%AF%AD%E8%A8%80%E6%B1%82%E7%B4%A0%E6%95%B0/</url>
    <content><![CDATA[<p>C语言求100以内的全部素数，每行输出10个。</p>
<p>素数就是只能被1和自身整除的正整数，1不是素数，2是素数。要求定义和调用函数prime(m)判断m是否为素数，当m为素数时返回1，否则返回0。</p>
<span id="more"></span>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
开发者：慢蜗牛 开发时间：2020.5.28
程序功能：求100以内的素数
*/</span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
 
<span class="token keyword">int</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token comment">//定义求素数的函数</span>
<span class="token punctuation">&#123;</span>
 
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
 
<span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//判断u是否为素数</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> m <span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
 
<span class="token keyword">int</span> m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
 
<span class="token keyword">for</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//在2到100内逐一 取整数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">prime</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//引用函数并输出素数</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%6d"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        n <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
 
<span class="token keyword">else</span><span class="token punctuation">;</span>
 
<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//控制每行10个素数</span>
<span class="token keyword">else</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>C</category>
        <category>作业</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>课堂练习</tag>
      </tags>
  </entry>
  <entry>
    <title>python之封装及私有方法</title>
    <url>/2021/05/30/python%E4%B9%8B%E5%B0%81%E8%A3%85%E5%8F%8A%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>封装：提高程序的安全性</p>
<ul>
<li>将属性和方法包装到类对象中，在方法内部对属性进行操作，在类对象外部调用方法，使得程序更加简洁</li>
<li>在python中，如果该属性不希望在类对象外部被访问，前边可以加两个“_”</li>
</ul>
<span id="more"></span>

<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="简洁"><a href="#简洁" class="headerlink" title="简洁"></a>简洁</h2><p>先定义一个类</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
 
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'在打蜗牛'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://img-blog.csdnimg.cn/202105182026101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNzYyMTg4,size_16,color_FFFFFF,t_70">

<p>我们在编译器旁边可以看到一个减号，点击这个减号可以让我们的类中的对象都收录起来</p>
<img src="https://img-blog.csdnimg.cn/2021051820234871.png">

<p>然后我们来创建这个类的对象</p>
<p>当我们输入这个’.’的时候就可以看到这个类中的方法了</p>
<img src="https://img-blog.csdnimg.cn/20210518202727658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNzYyMTg4,size_16,color_FFFFFF,t_70">

<p>然后我们使用这些方法</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">sws_1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'慢蜗牛'</span><span class="token punctuation">)</span>
sws_1<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

<span class="token comment">######</span>
慢蜗牛在打蜗牛
慢蜗牛<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么这个就是我们的封装了</p>
<h2 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h2><p>在python中，如果该属性不希望在类对象外部被访问，前边可以加两个“_”</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age  <span class="token comment"># 不想被别人知道年龄，所以加__进行保密操作</span>
 
    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__age<span class="token punctuation">)</span>
 
 
sws_1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'慢蜗牛'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
sws_1<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后我们在类的外部使用name和age看看</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在类的外部使用name与age看看</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">.</span>__age<span class="token punctuation">)</span>

<span class="token comment">######</span>
慢蜗牛 <span class="token number">20</span>
 
慢蜗牛
 
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"D:\pythonProject\main.py"</span><span class="token punctuation">,</span> line <span class="token number">15</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">.</span>__age<span class="token punctuation">)</span>
AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'__age'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以看到，报错显示这里Student类中没有__age这个属性</p>
<p>但是这个加两个’_’的操作其实是可以被使用的，我们这里使用dir()函数，如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token string">'_Student__age'</span><span class="token punctuation">,</span> <span class="token string">'__class__'</span><span class="token punctuation">,</span> <span class="token string">'__delattr__'</span><span class="token punctuation">,</span> <span class="token string">'__dict__'</span><span class="token punctuation">,</span> <span class="token string">'__dir__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__eq__'</span><span class="token punctuation">,</span> <span class="token string">'__format__'</span><span class="token punctuation">,</span> <span class="token string">'__ge__'</span><span class="token punctuation">,</span> <span class="token string">'__getattribute__'</span><span class="token punctuation">,</span> <span class="token string">'__gt__'</span><span class="token punctuation">,</span> <span class="token string">'__hash__'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">,</span> <span class="token string">'__init_subclass__'</span><span class="token punctuation">,</span> <span class="token string">'__le__'</span><span class="token punctuation">,</span> <span class="token string">'__lt__'</span><span class="token punctuation">,</span> <span class="token string">'__module__'</span><span class="token punctuation">,</span> <span class="token string">'__ne__'</span><span class="token punctuation">,</span> <span class="token string">'__new__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce_ex__'</span><span class="token punctuation">,</span> <span class="token string">'__repr__'</span><span class="token punctuation">,</span> <span class="token string">'__setattr__'</span><span class="token punctuation">,</span> <span class="token string">'__sizeof__'</span><span class="token punctuation">,</span> <span class="token string">'__str__'</span><span class="token punctuation">,</span> <span class="token string">'__subclasshook__'</span><span class="token punctuation">,</span> <span class="token string">'__weakref__'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'show'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以看到sws_1中拥有的属性和方法，这个时候可以看到第一个属性’_Student__age’</p>
<p>这个时候我们就可以使用这个来进行访问了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">.</span>_Student__age<span class="token punctuation">)</span>
 
<span class="token comment">######</span>
<span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个时候就有人要问了，既然都可以访问，那我们封装岂不是多余的操作吗</p>
<p>其实这就要看我们程序员的自觉性了，看到两个下划线的属性就不要去访问了</p>
<p>因为主人不希望我们去访问，但是这是靠自觉的啦</p>
<p>其实世界上各种加密算法都是可以被破解的，一切都靠自觉而已</p>
]]></content>
      <categories>
        <category>python</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>封装，类</tag>
      </tags>
  </entry>
  <entry>
    <title>python之特殊属性和特殊方法</title>
    <url>/2021/05/30/python%E4%B9%8B%E7%89%B9%E6%AE%8A%E5%B1%9E%E6%80%A7%E5%92%8C%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>分享完了面对对象的三大特征：<a href="https://blog.csdn.net/qq_53762188/article/details/116999907">封装</a>、<a href="https://blog.csdn.net/qq_53762188/article/details/117000917">继承</a>和<a href="https://blog.csdn.net/qq_53762188/article/details/117109717">多态</a>之后，我们再来看一下特殊属性和特殊方法</p>
<ul>
<li><p>特殊属性</p>
<ul>
<li>_<em>dict</em>_:获得类对象或实例对象所绑定的所有属性和方法的字典</li>
<li>_<em>class</em>_:查看对象所属类</li>
<li>_<em>bases</em>_:查看子类继承的父类</li>
<li>_<em>mro</em>_:查看类的层次结构</li>
<li>_<em>subclasses</em>_:查看父类被继承的子类</li>
</ul>
</li>
<li><p>特殊方法</p>
<ul>
<li>_<em>len</em>_():通过重写，让内置函数len()的参数可以是自定义类型</li>
<li>_<em>add</em>_():通过重写，可使用自定义对象具有“+”功能</li>
<li>_<em>new</em>_():用于创建对象</li>
<li>_<em>init</em>_():对创建对象进行初始化</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h1 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h1><h2 id="dict-查看属性和方法"><a href="#dict-查看属性和方法" class="headerlink" title="__dict__查看属性和方法"></a>__dict__查看属性和方法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
 
 
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
 
 
<span class="token comment"># 多继承</span>
<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age
 
 
<span class="token comment"># 创建C类的对象</span>
x <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token string">'SWS'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># x是C类的实例对象</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们这里有两个A，B类，然后C类多继承了他们，关于多继承可以看看<a href="https://blog.csdn.net/qq_53762188/article/details/117000917">python之继承及其实现方法</a>，然后就定义了一个__init__()初始化的方法并且定义了两个实例属性name和age，那我们现在就可以用__dict__来查看我们的C类对象x的所有属性和方法</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'SWS'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>那我们再来看看C类的属性和方法</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建C类的对象</span>
x <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token string">'SWS'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># x是C类的实例对象</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment"># 实例对象的属性字典</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment">#类对象的属性字典</span>

<span class="token comment">######</span>
<span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'SWS'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token string">'__module__'</span><span class="token punctuation">:</span> <span class="token string">'__main__'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function C<span class="token punctuation">.</span>__init__ at <span class="token number">0x000001F3AB41FB80</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那我们现在就可以看到C类的属性’_<em>module__‘;’__main__‘之后就接了’__init</em>_’方法</p>
<h2 id="class-查看对象所属类"><a href="#class-查看对象所属类" class="headerlink" title="__class__查看对象所属类"></a>__class__查看对象所属类</h2><p>我们用__dict__可以查看属性和方法，当然还可以查看对象所属的类是什么啦</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>

<span class="token comment">######</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.C'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们现在就可以看到x对象所属的类是C类</p>
<h2 id="bases-查看子类的父类"><a href="#bases-查看子类的父类" class="headerlink" title="__bases__查看子类的父类"></a>__bases__查看子类的父类</h2><p>现在由对象可以看到类，那么由子类可不可以看到父类呢，答案当然是可以的啦，不过这事就要用到__bases__啦</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__bases__<span class="token punctuation">)</span>

<span class="token comment">######</span>
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.A'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.B'</span><span class="token operator">></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样我们就可以看到C类的父类类型的元素A,B啦</p>
<h2 id="mro-查看类的层次结构"><a href="#mro-查看类的层次结构" class="headerlink" title="__mro__查看类的层次结构"></a>__mro__查看类的层次结构</h2><p>那我们现在可以查看子类的父类了，但是又觉得一层一层看太麻烦了怎么办，那这个时候我们就可以查看层次结构来一目了然</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span>

<span class="token comment">######</span>
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.C'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.A'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.B'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在是不是觉得看过去一目了然，很方便了呢</p>
<h2 id="subclasses-查看父类被继承的子类"><a href="#subclasses-查看父类被继承的子类" class="headerlink" title="__subclasses__查看父类被继承的子类"></a>__subclasses__查看父类被继承的子类</h2><p>现在有人不高兴了说，凭什么可以子类查看父类，不可以父类查看子类呢，哈哈哈，不要着急，这不就来了吗</p>
<p>为了更直观一点，我又添加了一个子类来继承A类，哈哈哈</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age
 
<span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.C'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.D'</span><span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看看看，输出了子类的列表了吧，哈哈哈，一点也米有不公平呀</p>
<h1 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h1><p>分享完了特殊属性，终于到特殊方法啦</p>
<h2 id="add-类的对象相加"><a href="#add-类的对象相加" class="headerlink" title="_add_()类的对象相加"></a>_<em>add</em>_()类的对象相加</h2><p>我们知道python中整数类型的对象可以相加，虽然是通过+来完成的，但是底层是调用_<em>add</em>_()方法来完成的</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">60</span>
b <span class="token operator">=</span> <span class="token number">300</span>
c <span class="token operator">=</span> a <span class="token operator">+</span> b
d <span class="token operator">=</span> a<span class="token punctuation">.</span>__add__<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span>

<span class="token comment">######</span>
<span class="token number">360</span> <span class="token number">360</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 那我们自定义类型的对象可不可以呢，一起来看看吧</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SWS</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
 
 
sws_1 <span class="token operator">=</span> SWS<span class="token punctuation">(</span><span class="token string">'慢蜗牛'</span><span class="token punctuation">)</span>
sws_2 <span class="token operator">=</span> SWS<span class="token punctuation">(</span><span class="token string">'小蜗牛'</span><span class="token punctuation">)</span>
sws_3 <span class="token operator">=</span> sws_2 <span class="token operator">+</span> sws_1
 
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_3<span class="token punctuation">)</span>

<span class="token comment">######</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"D:\pythonProject\main.py"</span><span class="token punctuation">,</span> line <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    sws_3 <span class="token operator">=</span> sws_2 <span class="token operator">+</span> sws_1
TypeError<span class="token punctuation">:</span> unsupported operand <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token operator">+</span><span class="token punctuation">:</span> <span class="token string">'SWS'</span> <span class="token keyword">and</span> <span class="token string">'SWS'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>哎呀，电脑报错啦，告诉我们SWS和SWS不能进行相加，那慢蜗牛的牛脾气上来了，我还非要你们想加，哼哼哼</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SWS</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
 
    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 可以看到这里运用了__add__()方法</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name <span class="token operator">+</span> other<span class="token punctuation">.</span>name
 
 
sws_1 <span class="token operator">=</span> SWS<span class="token punctuation">(</span><span class="token string">'慢蜗牛'</span><span class="token punctuation">)</span>
sws_2 <span class="token operator">=</span> SWS<span class="token punctuation">(</span><span class="token string">'小蜗牛'</span><span class="token punctuation">)</span>
sws_3 <span class="token operator">=</span> sws_2 <span class="token operator">+</span> sws_1
 
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_3<span class="token punctuation">)</span>

<span class="token comment">######</span>
小蜗牛慢蜗牛<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以看到运用了_<em>add</em>_()方法，并且返回两个名字，来看看行不行</p>
<p>哎呀，我真是太牛批啦，这都完成了，那我们来看看直接用_<em>add</em>_()来相加</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SWS</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
 
    <span class="token comment"># def __add__(self, other):  # 这里是注释掉了的</span>
    <span class="token comment">#     return self.name + other.name</span>
 
 
sws_1 <span class="token operator">=</span> SWS<span class="token punctuation">(</span><span class="token string">'慢蜗牛'</span><span class="token punctuation">)</span>
sws_2 <span class="token operator">=</span> SWS<span class="token punctuation">(</span><span class="token string">'小蜗牛'</span><span class="token punctuation">)</span>
sws_3 <span class="token operator">=</span> sws_2<span class="token punctuation">.</span>__add__<span class="token punctuation">(</span>sws_1<span class="token punctuation">)</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>sws_3<span class="token punctuation">)</span>

<span class="token comment">######</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"D:\pythonProject\main.py"</span><span class="token punctuation">,</span> line <span class="token number">11</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    sws_3 <span class="token operator">=</span> sws_2<span class="token punctuation">.</span>__add__<span class="token punctuation">(</span>sws_1<span class="token punctuation">)</span>
AttributeError<span class="token punctuation">:</span> <span class="token string">'SWS'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'__add__'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>好吧好吧，现在看来，要想实现两个自定义类型对象的相加就必须用到被注释掉的部分啦</p>
<h2 id="len-类的对象的长度"><a href="#len-类的对象的长度" class="headerlink" title="_len_()类的对象的长度"></a>_<em>len</em>_()类的对象的长度</h2><p>谈到__len__()，大家肯定就想到了对列表求长度的函数len()，那我们来看看这两者的功能</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">######</span>
<span class="token number">4</span>
<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于列表来说这两者功能都一致啊，那我们想要输出自定义类型对象的长度呢</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
<span class="token comment">######</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"D:\pythonProject\main.py"</span><span class="token punctuation">,</span> line <span class="token number">19</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">)</span><span class="token punctuation">)</span>
TypeError<span class="token punctuation">:</span> <span class="token builtin">object</span> of <span class="token builtin">type</span> <span class="token string">'SWS'</span> has no <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>哎呀，又报错了，哈哈哈，牛脾气不改，接着和你刚</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SWS</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
 
    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name <span class="token operator">+</span> other<span class="token punctuation">.</span>name
 
    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
 
sws_1 <span class="token operator">=</span> SWS<span class="token punctuation">(</span><span class="token string">'慢蜗牛'</span><span class="token punctuation">)</span>
sws_2 <span class="token operator">=</span> SWS<span class="token punctuation">(</span><span class="token string">'SWS'</span><span class="token punctuation">)</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sws_2<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
<span class="token comment">######</span>
<span class="token number">3</span>
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>没有错啊，这回你不刚了吧，电脑还是没有人聪明啊</p>
<h2 id="new-和-init"><a href="#new-和-init" class="headerlink" title="__new__()和__init__()"></a>__new__()和__init__()</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SWS</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__new__被调用执行了，cls的id为&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        obj <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'创建的对象的id为&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> obj
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__init__被调用了，self的id为&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age
        
 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'object这个类对象的id为&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SWS这个类对象的id为&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>SWS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 
sws_1 <span class="token operator">=</span> SWS<span class="token punctuation">(</span><span class="token string">'慢蜗牛'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sws_1这个SWS类的实例对象的id为&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>sws_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">######</span>
<span class="token builtin">object</span>这个类对象的<span class="token builtin">id</span>为<span class="token number">140735397846528</span>
SWS这个类对象的<span class="token builtin">id</span>为<span class="token number">1979325068288</span>
__new__被调用执行了，cls的<span class="token builtin">id</span>为<span class="token number">1979325068288</span>
创建的对象的<span class="token builtin">id</span>为<span class="token number">1979331727120</span>
__init__被调用了，self的<span class="token builtin">id</span>为<span class="token number">1979331727120</span>
sws_1这个SWS类的实例对象的<span class="token builtin">id</span>为<span class="token number">1979331727120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://img-blog.csdnimg.cn/20210521123512111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNzYyMTg4,size_16,color_FFFFFF,t_70">

<p>我们之前总是提到创建对象的初始化用_<em>init</em>_()来完成，可是初始化之前，我们肯定要创建一个新对象才行呀，那我们现在就来看看这两者的关系</p>
<p>我们先创建一个实例对象，用＝来赋值肯定是从右边开始</p>
<p>然后看看我们cls的ID和类的ID是一样的，就可以知道第一步是把类赋给cls，然后cls就返回了一个新的对象给obj</p>
<p>第二步就是obj把自己赋给了self来初始化对象</p>
<p>最后返回初始化好的对象给sws_1</p>
]]></content>
      <categories>
        <category>python</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>特殊属性，特殊方法</tag>
      </tags>
  </entry>
  <entry>
    <title>python之继承及其实现方法</title>
    <url>/2021/05/30/python%E4%B9%8B%E7%BB%A7%E6%89%BF%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> 子类类名<span class="token punctuation">(</span>父类<span class="token number">1</span><span class="token punctuation">,</span> 父类<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果一个类没有继承任何类，则默认继承object</p>
<p>python支持多继承</p>
<p>定义子类时，必须在其构造函数中调用父类的构造函数</p>
<p>这之间的继承关系就如同血缘继承一般</p>
<span id="more"></span>

<img src="https://img-blog.csdnimg.cn/2021051821124563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNzYyMTg4,size_16,color_FFFFFF,t_70">

<h2 id="继承的代码实现"><a href="#继承的代码实现" class="headerlink" title="继承的代码实现"></a>继承的代码实现</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Farther</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 这里的object可写可不写，不写就默认为object</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age
 
    <span class="token keyword">def</span> <span class="token function">put_1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
 
 
<span class="token keyword">class</span> <span class="token class-name">Me</span><span class="token punctuation">(</span>Farther<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> university<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>grade <span class="token operator">=</span> university
 
 
<span class="token keyword">class</span> <span class="token class-name">Brother</span><span class="token punctuation">(</span>Farther<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grad<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>grad <span class="token operator">=</span> grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们现在来看看我们创建的这个结构是什么样的</p>
<img src="https://img-blog.csdnimg.cn/20210518212946247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNzYyMTg4,size_16,color_FFFFFF,t_70">

<p>然后我们来创建Me和Brother的对象</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">sws_1 <span class="token operator">=</span> Me<span class="token punctuation">(</span><span class="token string">'慢蜗牛'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'大二'</span><span class="token punctuation">)</span>
sws_2 <span class="token operator">=</span> Brother<span class="token punctuation">(</span><span class="token string">'小蜗牛'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'高二'</span><span class="token punctuation">)</span>
 
sws_1<span class="token punctuation">.</span>put_1<span class="token punctuation">(</span><span class="token punctuation">)</span>
sws_2<span class="token punctuation">.</span>put_1<span class="token punctuation">(</span><span class="token punctuation">)</span>
 
<span class="token comment">######</span>
慢蜗牛 <span class="token number">20</span>
小蜗牛 <span class="token number">17</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那我们这里就可以看到，sws_1和sws_2分别在Me和Brother中继承了Farther的名字、年龄还有方法</p>
<p>最后再通过父类的方法来打印名字与年龄</p>
<p>至于怎么打印年级，大家可以仿照put_1来添加代码实现，动起小手试试啦</p>
<h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><p>一个子类继承多个父类的继承称为多继承</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
 
 
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
 
 
<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>python</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>类</tag>
        <tag>class</tag>
      </tags>
  </entry>
  <entry>
    <title>python列表添加元素之append()函数和insert()函数py</title>
    <url>/2021/05/30/python%E5%88%97%E8%A1%A8%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0%E4%B9%8Bappend-%E5%87%BD%E6%95%B0%E5%92%8Cinsert-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="append-函数"><a href="#append-函数" class="headerlink" title="append()函数"></a><em>append()函数</em></h1><p>在列表中添加新元素时，最简单的方法就是附加在末尾：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span>
 
list_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'four'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>函数append()就是将’four’添加在列表末尾，而且不影响列表其他元素</p>
<span id="more"></span>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h1 id="insert-函数"><a href="#insert-函数" class="headerlink" title="insert()函数"></a><strong>insert()函数</strong></h1><p>insert()函数顾名思义”插入”,可以在列表任何位置插入元素，</p>
<p>insert(索引，元素），列表里元素的索引(位置)和C语言一样是从0开始的</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span>
list_1<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span>

<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果该位置上已经有元素了，那么该元素以及后面的元素会右移一位，如： </p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span>
list_1<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span>

<span class="token comment">######</span>
<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>本来’two’元素在列表list_1索引1的位置，但是’four’插入到了1的位置，那么’two’以及后面的’three’就会右移一位</p>
]]></content>
      <categories>
        <category>python</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>列表</tag>
      </tags>
  </entry>
  <entry>
    <title>python之多态</title>
    <url>/2021/05/30/python%E4%B9%8B%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>简单地说，多态就是“拥有多种形态”，它是指：就算不知道一个变量引用的对象是什么类型，仍然可以通过这个变量调用方法，在运行过程中根据变量所引用对象的类型，动态决定调用哪个对象的方法</p>
<p>我们先来看看这段代码，关于括号内的object类可以看看<a href="https://blog.csdn.net/qq_53762188/article/details/117040415">python之object类</a>这篇文章</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'动物要吃东西'</span><span class="token punctuation">)</span>
 
 
<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'欧迪吃狗粮'</span><span class="token punctuation">)</span>
 
 
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'加菲猫吃千层面'</span><span class="token punctuation">)</span>
 
 
<span class="token keyword">class</span> <span class="token class-name">SWS</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'慢蜗牛吃饭'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>我们这里先有一个Animal类继承了object类，方法是动物吃东西</p>
<p>然后就是Dog，一想到到dog啊，我就能联想起加菲猫的幸福生活，那我们就定义猫和狗的类吧，然后都是动物，就继承Animal类吧</p>
<p>关于python的继承，我们可以看看<a href="https://blog.csdn.net/qq_53762188/article/details/117000917">python之继承及其实现方法</a>这篇文章</p>
<p> 当然啦，慢蜗牛自己也要吃饭的呀，不然饿瘦了怎么办，我又不是动物，肯定自成一体继承object类啦</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sws_1</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    animal<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>
 
 
sws_1<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sws_1<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sws_1<span class="token punctuation">(</span>SWS<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">######</span>
欧迪吃狗粮
加菲猫吃千层面
慢蜗牛吃饭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们看看这个函数（在类之外定义的def叫函数啊，可以看看<a href="https://blog.csdn.net/qq_53762188/article/details/116998326">python的动态绑定属性和方法</a>这篇文章）这里定义了一个sws_1的函数，通过传入的对象来调用eat()方法，我们来看看实现结果</p>
<p>我们可以看到啊，虽然这三个对象所继承的类不同，但是只要具备eat()方法就可以调用，和这些对象是否含有继承关系无关，这个可是python和别的编程语言所不一样的地方哦，俗称“鸭子类型”</p>
<h1 id="静态语言和动态语言关于多态的区别"><a href="#静态语言和动态语言关于多态的区别" class="headerlink" title="静态语言和动态语言关于多态的区别"></a>静态语言和动态语言关于多态的区别</h1><ul>
<li>动态语言的多态崇尚“鸭子类型”，也就是说啊，当一只鸟走起来，游起来，收起来都像鸭子，那么这只鸟就可以被称作鸭子，在鸭子类型中，不需要关心对象是什么类型，到底是不是鸭子，只关心对象的行为。</li>
<li>静态语言实现多态的三个必要条件<ul>
<li>继承</li>
<li>方法重写</li>
<li>父类引用指向子类对象</li>
</ul>
</li>
</ul>
<p>上面也就是说，我们不需要关心SWS是谁的子类，我们只需要关心SWS有没有eat()方法，这个就是动态语言的一个特征。而我们的Java就是静态语言，而我们的Java要实现多态的时候就必须明确继承关系。 </p>
<p>这边可能会有小票网友要问啦，这里Dog和Cat不是继承了Animal吗，怎么还是自己的方法而不是父类的方法呢，其实啊，这里就是子类对父类的重写啦，具体可以看看<a href="https://blog.csdn.net/qq_53762188/article/details/117001931">python之继承的方法重写</a></p>
]]></content>
      <categories>
        <category>python</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>多态</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo个人博客搭建</title>
    <url>/2021/05/31/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="用hexo搭建个人博客"><a href="#用hexo搭建个人博客" class="headerlink" title="用hexo搭建个人博客"></a>用hexo搭建个人博客</h1><p>为了使后面hexo的个性搭建以及个人博客的发布操作简便，推荐大家下载以下软件</p>
<p>别忘了配置环境变量哦</p>
<img src='https://img-blog.csdnimg.cn/20210531001208768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNzYyMTg4,size_16,color_FFFFFF,t_70'>

<span id="more"></span>

<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ul>
<li>准备好github账号，并且创建好仓库<ul>
<li>仓库名格式必须是“用户名.github.io”,用户名是github账号名</li>
</ul>
</li>
</ul>
<img src='https://img-blog.csdnimg.cn/20210530234015770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNzYyMTg4,size_16,color_FFFFFF,t_70'>

<h3 id="Node-js和Git"><a href="#Node-js和Git" class="headerlink" title="Node.js和Git"></a>Node.js和Git</h3><ul>
<li>Hexo基于Node.js，搭建过程中还需要使用npm (Node.js 已带)和git，因此先搭建本地操作环境，安装Node.js和Git。<ul>
<li><a href="https://nodejs.org/zh-cn">Node.js</a>、<a href="https://git-scm.com/downloads">Git</a></li>
</ul>
</li>
</ul>
<p>Node.js下载长期支持版就可以</p>
<p>Git下载安装时一路next到这一步时选择这样</p>
<img src='https://img-blog.csdnimg.cn/202105302349052.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNzYyMTg4,size_16,color_FFFFFF,t_70'>

<img src='https://img-blog.csdnimg.cn/20210530234931667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNzYyMTg4,size_16,color_FFFFFF,t_70'>

<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ul>
<li>本地创建一个文件夹，切换目录到新创建的文件夹。格式为：D:\xxxx\用户名.github.io ，要与github仓库名一致，也可以在别的盘</li>
</ul>
<img src='https://img-blog.csdnimg.cn/20210531000020467.png'>

<ul>
<li>在该文件夹里面右击鼠标打开Git Bash执行 npm install hexo-cli -g，安装hexo</li>
</ul>
<img src='https://img-blog.csdnimg.cn/20210531000226376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNzYyMTg4,size_16,color_FFFFFF,t_70'>

<ul>
<li>执行命令npx hexo init，hexo初始化</li>
<li>执行命令npx hexo server或者npx hexo s，本地启动网页</li>
<li>打开命令界面给出的本地网页：<a href="http://localhost:4000/">http://localhost:4000/</a></li>
</ul>
<img src='https://img-blog.csdnimg.cn/20210531000332946.png'>

<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>给hexo安装git插件： npm install hexo-deployer-git</p>
<p>安装并配置admin插件：npm install –save hexo-admin</p>
<h1 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h1><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p><strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>
<p>如果下载了subl可以直接使用命令subl _config.yml</p>
<img src='https://img-blog.csdnimg.cn/20210531000645788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzNzYyMTg4,size_16,color_FFFFFF,t_70'>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:
  type: <span class="token function">git</span>
  repository: git@github.com:用户名/用户名.github.io.git
  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>完成后运行hexo d命令将网站上传部署到 GitHub Pages。</p>
<p>这个时候就可以用https://用户名.github.io进行个人博客访问啦</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>搭建个人博客</tag>
      </tags>
  </entry>
</search>
