<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>numpy数组基础</title>
    <url>/2021/05/29/numpy%E6%95%B0%E7%BB%84%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="NUMPY"><a href="#NUMPY" class="headerlink" title="NUMPY"></a>NUMPY</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>在numpy中，创建数组有很多种方法，例如如下的例子：</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">sws_1 = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">sws_2 = np.array((<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">sws_3 = np.arange(<span class="number">5</span>) </span><br><span class="line">sws_4 = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sws_1[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># 切片</span></span><br><span class="line"><span class="built_in">print</span>(sws_2)</span><br><span class="line"><span class="built_in">print</span>(sws_3)</span><br><span class="line"><span class="built_in">print</span>(sws_4)</span><br><span class="line"><span class="built_in">print</span>(sws_1[<span class="number">3</span>])</span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">[<span class="number">0.</span>         <span class="number">1.57079633</span> <span class="number">3.14159265</span> <span class="number">4.71238898</span> <span class="number">6.28318531</span>]</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>np.arange()和np.linspace()方法可以参考<a href="https://blog.csdn.net/qq_53762188/article/details/117167379">python之range()、arange()和linspace()</a>这篇文章</p>
<p>切片的知识也可以参照<a href="https://blog.csdn.net/qq_53762188/article/details/117044059">python列表之部分列表——切片</a>，毕竟一维数组的切片还是一样的</p>
<h2 id="多维数组切片"><a href="#多维数组切片" class="headerlink" title="多维数组切片"></a>多维数组切片</h2><p>多维数组的切片要比一维数组复杂一点，但也只是一点点哦，让我们一起来看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> arange</span><br><span class="line"> </span><br><span class="line">sws_1 = np.array([arange(<span class="number">0</span>, <span class="number">5</span>),</span><br><span class="line">                  arange(<span class="number">5</span>, <span class="number">10</span>),</span><br><span class="line">                  arange(<span class="number">10</span>, <span class="number">15</span>),</span><br><span class="line">                  arange(<span class="number">15</span>, <span class="number">20</span>),</span><br><span class="line">                  arange(<span class="number">20</span>, <span class="number">25</span>)])</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sws_1[<span class="number">0</span>, <span class="number">1</span>:<span class="number">4</span>], <span class="string">&#x27;\n&#x27;</span>)  <span class="comment"># 在第0行进行1：4的切片</span></span><br><span class="line"><span class="built_in">print</span>(sws_1[<span class="number">1</span>:<span class="number">4</span>, <span class="number">0</span>], <span class="string">&#x27;\n&#x27;</span>)  <span class="comment"># 在第0列进行1：4的切片</span></span><br><span class="line"><span class="built_in">print</span>(sws_1[::<span class="number">2</span>, ::<span class="number">2</span>], <span class="string">&#x27;\n&#x27;</span>)  <span class="comment"># 从列、行的0开始，最后结束，分别步进为2取值</span></span><br><span class="line"><span class="built_in">print</span>(sws_1[:, <span class="number">1</span>], <span class="string">&#x27;\n&#x27;</span>)  <span class="comment"># 在第一列取所有元素</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] </span><br><span class="line"> </span><br><span class="line">[ <span class="number">5</span> <span class="number">10</span> <span class="number">15</span>] </span><br><span class="line"> </span><br><span class="line">[[ <span class="number">0</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">12</span> <span class="number">14</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">22</span> <span class="number">24</span>]] </span><br><span class="line"> </span><br><span class="line">[ <span class="number">1</span>  <span class="number">6</span> <span class="number">11</span> <span class="number">16</span> <span class="number">21</span>]</span><br></pre></td></tr></table></figure>

<h2 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> arange</span><br><span class="line"> </span><br><span class="line">sws_1 = np.array([arange(<span class="number">0</span>, <span class="number">5</span>),</span><br><span class="line">                  arange(<span class="number">5</span>, <span class="number">10</span>),</span><br><span class="line">                  arange(<span class="number">10</span>, <span class="number">15</span>),</span><br><span class="line">                  arange(<span class="number">15</span>, <span class="number">20</span>),</span><br><span class="line">                  arange(<span class="number">20</span>, <span class="number">25</span>)])</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(sws_1))  <span class="comment"># 数据结构类型，如list，dict等</span></span><br><span class="line"><span class="built_in">print</span>(sws_1.dtype)  <span class="comment"># 数据元素类型，如int，float等，还有位的大小</span></span><br><span class="line"><span class="built_in">print</span>(sws_1.size)  <span class="comment"># 统计元素个数</span></span><br><span class="line"><span class="built_in">print</span>(sws_1.shape)  <span class="comment"># 相当于数学里的（x，y，z）</span></span><br><span class="line"><span class="built_in">print</span>(sws_1.itemsize)  <span class="comment"># 每项占用的字节数，一个字节有8位</span></span><br><span class="line"><span class="built_in">print</span>(sws_1.ndim)  <span class="comment"># 数组的维度</span></span><br><span class="line"><span class="built_in">print</span>(sws_1.nbytes)  <span class="comment"># 数组中所有数据消耗的总字节</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">numpy</span>.<span class="title">ndarray</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">int32</span></span></span><br><span class="line"><span class="class">25</span></span><br><span class="line"><span class="class">(<span class="params"><span class="number">5</span>, <span class="number">5</span></span>)</span></span><br><span class="line"><span class="class">4</span></span><br><span class="line"><span class="class">2</span></span><br><span class="line"><span class="class">100</span></span><br></pre></td></tr></table></figure>

<h2 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h2><p>基本操作符+、-、*、/、**、&lt;、&gt;和dot()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> arange</span><br><span class="line"> </span><br><span class="line">sws_0 = arange(<span class="number">30</span>, <span class="number">55</span>)</span><br><span class="line">sws_0 = sws_0.reshape((<span class="number">5</span>, <span class="number">5</span>))  <span class="comment"># 让sws_0的所有元素按照（5，5）的维度排列</span></span><br><span class="line"> </span><br><span class="line">sws_1 = np.array([arange(<span class="number">0</span>, <span class="number">5</span>),</span><br><span class="line">                  arange(<span class="number">5</span>, <span class="number">10</span>),</span><br><span class="line">                  arange(<span class="number">10</span>, <span class="number">15</span>),</span><br><span class="line">                  arange(<span class="number">15</span>, <span class="number">20</span>),</span><br><span class="line">                  arange(<span class="number">20</span>, <span class="number">25</span>)])</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 对应索引位置的元素进行运算</span></span><br><span class="line"><span class="built_in">print</span>(sws_0 + sws_1)</span><br><span class="line"><span class="built_in">print</span>(sws_0 - sws_1)</span><br><span class="line"><span class="built_in">print</span>(sws_0 * sws_1)</span><br><span class="line"><span class="built_in">print</span>(sws_0 / sws_1)</span><br><span class="line"><span class="built_in">print</span>(sws_0 ** <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(sws_0 &lt; sws_1)</span><br><span class="line"><span class="built_in">print</span>(sws_0 &gt; sws_1)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 矩阵的乘法</span></span><br><span class="line"><span class="built_in">print</span>(sws_0.dot(sws_1))</span><br></pre></td></tr></table></figure>

<p>至于结果就不给大家发出来啦，毕竟太长了嘛，占篇幅，大家看着也疲劳，不过大家要自己动手试试哦</p>
<h2 id="数组特殊运算符"><a href="#数组特殊运算符" class="headerlink" title="数组特殊运算符"></a>数组特殊运算符</h2><p>如果要找数组中的一些特殊值，比如最大、最小或者求和呀，这里也可以很方便的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> arange</span><br><span class="line"> </span><br><span class="line">sws_0 = arange(<span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sws_0.<span class="built_in">sum</span>())</span><br><span class="line"><span class="built_in">print</span>(sws_0.<span class="built_in">min</span>())</span><br><span class="line"><span class="built_in">print</span>(sws_0.<span class="built_in">max</span>())</span><br><span class="line"><span class="built_in">print</span>(sws_0.cumsum())  </span><br><span class="line"><span class="comment"># 第一位先存入一个列表，然后第一位加第二位再存入列表，之后再加上第三位存入列表，以此类推</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">6</span> <span class="number">10</span> <span class="number">15</span> <span class="number">21</span> <span class="number">28</span> <span class="number">36</span> <span class="number">45</span>]</span><br></pre></td></tr></table></figure>

<h2 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">sws_0 = np.arange(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">sws_1 = sws_0[[<span class="number">1</span>, <span class="number">5</span>, -<span class="number">1</span>]]  </span><br><span class="line"><span class="comment"># 用一个列表包装想要打印的元素的索引</span></span><br><span class="line">sws_2 = sws_0[sws_0 &gt;= <span class="number">6</span>]  </span><br><span class="line"><span class="comment"># 根据条件判断</span></span><br><span class="line">sws_3 = np.where(sws_0 &lt;= <span class="number">6</span>)  </span><br><span class="line"><span class="comment"># 返回满足条件的元素的索引</span></span><br><span class="line">sws_4 = np.where(sws_0 &gt;= <span class="number">6</span>)[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sws_0)</span><br><span class="line"><span class="built_in">print</span>(sws_1)</span><br><span class="line"><span class="built_in">print</span>(sws_2)</span><br><span class="line"><span class="built_in">print</span>(sws_3)</span><br><span class="line"><span class="built_in">print</span>(sws_4)</span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">5</span> <span class="number">9</span>]</span><br><span class="line">[<span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">(array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], dtype=int64),)</span><br><span class="line">[<span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>python函数str()避免类型错误</title>
    <url>/2021/05/29/python%E5%87%BD%E6%95%B0str()%E9%81%BF%E5%85%8D%E7%B1%BB%E5%9E%8B%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>python中当输出需要拼接字符串(char)和整数(int)时，需要用到str()函数</p>
<span id="more"></span>

<p>如果编写如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Happy &quot;</span> + age +<span class="string">&quot;ed Birthday!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>会出现如下报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Happy &quot;</span> + age +<span class="string">&quot;ed Birthday!&quot;</span>)</span><br><span class="line">TypeError: can only concatenate <span class="built_in">str</span> (<span class="keyword">not</span> <span class="string">&quot;int&quot;</span>) to <span class="built_in">str</span></span><br></pre></td></tr></table></figure>

<p>这是一个<strong>类型错误，</strong>意味着python无法识别你使用的变量。</p>
<p>它不知道age是23还是字符2和3。</p>
<p>这个时候我们就需要用到str()函数来连接字符串和整数了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">23</span> </span><br><span class="line">message = <span class="string">&quot;Happy &quot;</span> + <span class="built_in">str</span>(age) + <span class="string">&quot;rd Birthday!&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="comment">######</span></span><br><span class="line">Happy 23rd Birthday!</span><br></pre></td></tr></table></figure>

<p>在这里python就知道你用str()函数把23转换为字符串2和3了，但是原变量age未改变</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(age,<span class="built_in">int</span>))</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>isinstance(变量名，类型)函数就是检测变量类型的函数，如果匹配则返回true，不匹配则返回False</p>
]]></content>
      <categories>
        <category>python</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>str()</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy理解</title>
    <url>/2021/05/30/numpy%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>我们再平常学习python和matlab中经常会看到一个词numpy，并且各大项目算法中都会涉及它，那究竟什么是numpy呢，我们今天就一起来看看吧</p>
<span id="more"></span>

<h1 id="什么是numpy"><a href="#什么是numpy" class="headerlink" title="什么是numpy"></a>什么是numpy</h1><p>numpy是由两个单词组成的——numerical、python，简单来看就是“数字python”，这样是不是就能很清楚的知道numpy是用来做python中有关于数值操作的呢。</p>
<p>其实呀，numpy就是一个功能强大的python库，提供了大量的库函数和操作，可以帮助我们轻松的进行数值运算，其中就包括：</p>
<ul>
<li><strong>机器学习：</strong>在编写相关算法时，需要用到例如矩阵乘法、加法和换位等运算，这时numpy就提供了用于简单编写代码并且快速计算的库。numpy数组就用于存储训练数据和机器学习模型的参数。</li>
<li><strong>图像处理和计算机图形学：</strong>我们在学习matlab时就知道音频信号是一维的，用一些函数就能处理，但是图像确实多维度的，这时numpy就提供了一些非常优秀的库函数来快速处理图像。例如：镜像、旋转等。</li>
<li><strong>数学任务：</strong>我们平时学习高数中的积分、微分等是不是觉得很头疼呢，但是numpy确实非常简单，并且会使得python替代matlab</li>
</ul>
<h1 id="numpy的安装"><a href="#numpy的安装" class="headerlink" title="numpy的安装"></a>numpy的安装</h1><p>关于numpy最快速简单的安装方法就是在shell上使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>

<p>但是如果你的pip不是最新版本21.1.1的话，是会下载失败的，查看pip版本用以下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip show pip</span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line">Name: pip</span><br><span class="line">Version: <span class="number">21.1</span><span class="number">.1</span> </span><br><span class="line">Summary: The PyPA recommended tool <span class="keyword">for</span> installing Python packages.</span><br><span class="line">Home-page: https://pip.pypa.io/</span><br><span class="line">Author: The pip developers</span><br><span class="line">Author-email: distutils-sig@python.org</span><br><span class="line">License: MIT</span><br><span class="line">Location: d:\pythonproject\venv\lib\site-packages</span><br><span class="line">Requires:</span><br><span class="line">Required-by:</span><br></pre></td></tr></table></figure>

<p>而更新pip则用如下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h1 id="numpy数组"><a href="#numpy数组" class="headerlink" title="numpy数组"></a>numpy数组</h1><p>numpy数组是numpy提供的最重要的数据结构，他是python列表的扩展，但是却具备大量的函数和运算符，可以帮助我们快速编写各种复杂计算的代码。</p>
<h2 id="定义numpy数组"><a href="#定义numpy数组" class="headerlink" title="定义numpy数组"></a>定义numpy数组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 给numpy定义一个别的名字np</span></span><br><span class="line">sws_array = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) </span><br><span class="line"><span class="built_in">print</span>(sws_array)</span><br></pre></td></tr></table></figure>

<p>我们这里先用as给numpy去一个缩写np，使得我们的代码更加简洁，再用import导入numpy库。然后我们创建了5个整数的numpy数组，最后将其打印出来。我们在自己的电脑上尝试的时候，一定一定一定要记得提前安装好numpy库噢！！！</p>
<h2 id="numpy数组的相关功能"><a href="#numpy数组的相关功能" class="headerlink" title="numpy数组的相关功能"></a>numpy数组的相关功能</h2><p>其实numpy数组和python列表基本没什么差别，python列表能完成的，numpy数组也能，例如</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 给numpy定义一个别的名字np</span></span><br><span class="line">sws_array = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) </span><br><span class="line"><span class="built_in">print</span>(sws_array)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sws_array.shape)  <span class="comment">#数组的长度</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sws_array[<span class="number">0</span>])  <span class="comment">#打印索引为0的元素</span></span><br><span class="line"> </span><br><span class="line">sws_array[<span class="number">0</span>] = -<span class="number">6</span>  <span class="comment">#修改索引为0的元素</span></span><br><span class="line"><span class="built_in">print</span>(sws_array[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>以上代码，大家都可以自己在电脑上尝试一下，我就不一一举例了，我们主要来看看numpy的独特算法</p>
<h3 id="0数组和1数组"><a href="#0数组和1数组" class="headerlink" title="0数组和1数组"></a>0数组和1数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 给numpy定义一个别的名字np</span></span><br><span class="line">sws_zeros_array = np.zeros(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(sws_zeros_array)</span><br><span class="line"> </span><br><span class="line">sws_ones_array = np.ones(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(sws_ones_array)</span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line">[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br></pre></td></tr></table></figure>

<p>我们可以看到第二行用 np.zeros，第四行用np.ones就创建了相应的只含0，1的5个元素的数组，至于有没有其他的呢，大家可以自己动手试验一下</p>
<h3 id="随机数组"><a href="#随机数组" class="headerlink" title="随机数组"></a>随机数组</h3><p>我们玩腻了0和1，现在想玩点高难度的，好，满足你，我们来随机数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 给numpy定义一个别的名字np</span></span><br><span class="line">sws_random_array = np.random.random(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(sws_random_array)</span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line">[<span class="number">0.4732169</span>  <span class="number">0.46246392</span> <span class="number">0.11748248</span> <span class="number">0.68879901</span> <span class="number">0.43405514</span>]</span><br></pre></td></tr></table></figure>

<p>我们可以看到这里就打印了5个随机数组，当然你们操作的时候可能会和我的不一样，因为是在0-1之间的随机数嘛，哈哈哈，如果一样的话，那慢蜗牛岂不是可以去买彩票了，如果大家不满足0-1的话，可以尝试*10等操作看看结果啦</p>
<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>一维数组说完了，我们现在来看看二维数组(i,j),这里i表示了行数，j表示了列数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 给numpy定义一个别的名字np</span></span><br><span class="line">sws_2d_array = np.random.random((<span class="number">2</span>, <span class="number">3</span>)) * <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(sws_2d_array)</span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line">[[<span class="number">9.50442357</span> <span class="number">1.3031723</span>  <span class="number">9.3511404</span> ]</span><br><span class="line"> [<span class="number">3.44925167</span> <span class="number">2.25456602</span> <span class="number">2.27545946</span>]]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sws_array = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">6</span>, <span class="number">9</span>]])</span><br><span class="line"><span class="built_in">print</span>(sws_array[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>我们可以看到上面的相关操作，是不是觉得很熟悉呢，没错啦，和我们C语言中的二维数组就是一模一样的操作啦，哈哈哈哈</p>
<p>那我们现在来看看numpy特有的二维数组的操作</p>
<p>如果我们想以此输出某个列或者行的所有元素怎么办呢，这里就可以用到我们的冒号啦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sws_array_lie_0 = sws_array[:, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(sws_array_lie_0)</span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line">[<span class="number">2</span> <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<p>我们这里是选择打印索引为1的列的所有元素，大家可以尝试一下打印行哈</p>
<h1 id="numpy的数组操作"><a href="#numpy的数组操作" class="headerlink" title="numpy的数组操作"></a>numpy的数组操作</h1><p>不知道大家有没有学过线性代数呢，大家在面对矩阵的相乘等操作时，是不是头疼欲裂呢，不要着急，慢蜗牛教程在手，天下我有，一起来看看下面的例子吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">sws_1 = np.array([[<span class="number">1.0</span>, <span class="number">2.0</span>], [<span class="number">3.0</span>, <span class="number">4.0</span>]])</span><br><span class="line">sws_2 = np.array([[<span class="number">5.0</span>, <span class="number">6.0</span>], [<span class="number">7.0</span>, <span class="number">8.0</span>]])</span><br><span class="line">sum_0 = sws_1 + sws_2</span><br><span class="line">subtract = sws_1 - sws_2</span><br><span class="line">multiply = sws_1 * sws_2</span><br><span class="line">division = sws_1 / sws_2</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sum_0=\n&#x27;</span>, sum_0)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;subtract=\n&#x27;</span>, subtract)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;multiply=\n&#x27;</span>, multiply)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;division=\n&#x27;</span>, division)</span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line">sum_0=</span><br><span class="line"> [[ <span class="number">6.</span>  <span class="number">8.</span>]</span><br><span class="line"> [<span class="number">10.</span> <span class="number">12.</span>]]</span><br><span class="line">subtract=</span><br><span class="line"> [[-<span class="number">4.</span> -<span class="number">4.</span>]</span><br><span class="line"> [-<span class="number">4.</span> -<span class="number">4.</span>]]</span><br><span class="line">multiply=</span><br><span class="line"> [[ <span class="number">5.</span> <span class="number">12.</span>]</span><br><span class="line"> [<span class="number">21.</span> <span class="number">32.</span>]]</span><br><span class="line">division=</span><br><span class="line"> [[<span class="number">0.2</span>        <span class="number">0.33333333</span>]</span><br><span class="line"> [<span class="number">0.42857143</span> <span class="number">0.5</span>       ]]</span><br></pre></td></tr></table></figure>

<p>我们可以观察到，打印的结果都是对应索引的元素进行相关操作，如果要进行矩阵乘法，我们还需要加一点料</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix_multiply = sws_1.dot(sws_2)</span><br><span class="line"><span class="built_in">print</span>(matrix_multiply)</span><br><span class="line"> </span><br><span class="line"><span class="comment">######</span></span><br><span class="line">[[<span class="number">19.</span> <span class="number">22.</span>]</span><br><span class="line"> [<span class="number">43.</span> <span class="number">50.</span>]]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
